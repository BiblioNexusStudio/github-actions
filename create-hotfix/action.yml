# Create a new hotfix branch from the most recently deployed commit to production and cherry-pick a specified commit.
# This action automates the process of:
# 1. Creating a hotfix branch from the last successful production deployment
# 2. Cherry-picking a specified commit from main/master
# 3. Creating a pull request for review
# The action also detects merge conflicts and provides appropriate status messages.

name: 'Create Hotfix'
description: 'Create a hotfix'
inputs:
  prod_environment:
    description: 'Prod environment to apply the commit to.'
    required: true
  commit_id:
    description: "Commit SHA from main/master"
    required: true
  app_id:
    description: 'GitHub App ID'
    required: true
  private_key:
    description: 'GitHub App private key'
    required: true
  github_token:
    description: 'GitHub token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Generate Github Token
      uses: tibdex/github-app-token@v2
      id: generate_token
      with:
        app_id: ${{ inputs.app_id }}
        private_key: ${{ inputs.private_key }}

    - uses: actions/checkout@v4
      with:
        token: ${{ steps.generate_token.outputs.token }}
        fetch-depth: 0

    - name: Check if commit is in main/master history
      shell: bash
      run: |
        if ! git merge-base --is-ancestor ${{ inputs.commit_id }} origin/main && ! git merge-base --is-ancestor ${{ inputs.commit_id }} origin/master; then
          echo "Error: The provided commit is not on main/master branch. Get the commit merged into main/master first then run this again."
          exit 1
        fi

    - name: Check for existing branch
      id: check_branch
      shell: bash
      run: |
        existing_branch=$(git ls-remote --heads origin release-hotfix-* | head -n 1 | cut -f2 | sed 's/^refs\/heads\///')
        echo "existing_branch=${existing_branch}" >> $GITHUB_OUTPUT

    - name: Find currently deployed commit
      if: steps.check_branch.outputs.existing_branch == ''
      id: find_commit
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const environment = '${{ inputs.prod_environment }}';
          try {
              const { data: deployments } = await github.rest.repos.listDeployments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  environment,
                  per_page: 100,
              });

              const successfulDeployments = [];

              for (const deployment of deployments) {
                  const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      deployment_id: deployment.id,
                      per_page: 10,
                  });

                  if (statuses.some((status) => status.state === "success")) {
                      successfulDeployments.push(deployment);
                  }
              }

              if (successfulDeployments.length > 0) {
                  const foundSha = successfulDeployments.sort(
                      (a, b) => new Date(b.created_at) - new Date(a.created_at),
                  )[0]?.sha || null;
                  console.log('Found successful deployment: ' + foundSha);
                  return foundSha;
              }

              core.setFailed(`Couldn't find an active deployment for ${environment}`);
          } catch (error) {
              core.setFailed(`Couldn't find an active deployment for ${environment}. ${error.message}`);
          }

    - name: Create new branch
      if: steps.check_branch.outputs.existing_branch == ''
      id: create_new_branch
      shell: bash
      run: |
        new_branch="release-hotfix-$(date +'%Y-%m-%d')"
        git fetch origin ${{ steps.find_commit.outputs.result }}
        git checkout -b $new_branch ${{ steps.find_commit.outputs.result }}
        git push origin $new_branch
        echo "new_branch=${new_branch}" >> $GITHUB_OUTPUT

    - name: Cherry-pick commit
      id: cherry_pick
      shell: bash
      run: |
        source_branch=$([ -n "${{ steps.check_branch.outputs.existing_branch }}" ] && echo "${{ steps.check_branch.outputs.existing_branch }}" || echo "${{ steps.create_new_branch.outputs.new_branch }}")
        git fetch origin ${{ inputs.commit_id }}
        git fetch origin $source_branch
        git checkout $source_branch
        commit_title=$(git log --format=%s -n 1 ${{ inputs.commit_id }} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//;s/-$//')
        cherry_pick_branch="hotfix-${commit_title}"
        git checkout -b "$cherry_pick_branch"
        git config --global user.email "biblionexusbot[bot]@users.noreply.github.com"
        git config --global user.name "biblionexusbot[bot]"
        if git cherry-pick ${{ inputs.commit_id }}; then
          cherry_pick_status="successful"
        else
          git add .
          git cherry-pick --continue
          cherry_pick_status="failed"
        fi
        commit_msg=$(git log --format=%B -n 1 HEAD)
        git commit --amend -m "Hotfix Commit: ${commit_msg}"
        git push origin $cherry_pick_branch
        echo "cherry_pick_status=${cherry_pick_status}" >> $GITHUB_OUTPUT
        echo "cherry_pick_branch=${cherry_pick_branch}" >> $GITHUB_OUTPUT
        echo "source_branch=${source_branch}" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      shell: bash
      run: |
        gh pr create \
          --base ${{ steps.cherry_pick.outputs.source_branch }} \
          --title "Hotfix PR: $(git log --format=%s -n 1 ${{ inputs.commit_id }})" \
          --body "This PR contains a hotfix cherry-picked from main/master.

        ${{ steps.cherry_pick.outputs.cherry_pick_status == 'failed' && ':warning: Merge conflicts happened that require manual intervention.' || ':white_check_mark: No merge conflicts.' }}" \
          --head ${{ steps.cherry_pick.outputs.cherry_pick_branch }}
      env:
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
